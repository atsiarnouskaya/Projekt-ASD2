package SiecPrzeplywowa;import com.google.gson.*;import java.awt.geom.Point2D;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import java.util.List;public class Main {    public static void main(String[] args) throws FileNotFoundException {        Data data= readFile();        Siec S2 = new Siec();        List<Point2D> intersections = data.getIntersections();        for(var point : intersections){            Vertex v = S2.addVertex((int)point.getX(), (int) point.getY());            v.setType("Intersection");        }        for(var farmland : data.farmlands){            Vertex v = S2.addVertex((int)farmland.getX(), (int) farmland.getY());            v.setType("Farmland");            v.setCapacity((int)farmland.getProductionCapacity());        }        for(var breweries : data.breweries){            Vertex v = S2.addVertex((int)breweries.getX(), (int)breweries.getY());            v.setType("Brewery");            v.setCapacity((int)breweries.getProductionCapacity());        }        for(var tavern : data.taverns){            Vertex v = S2.addVertex((int)tavern.getX(), (int)tavern.getY());            v.setType("Tavern");            v.setCapacity((int)tavern.getConsumptionCapacity());        }        for (Road road : data.roads) {            S2.addEdge(road.getMaxBarleyFlow(), (int)road.x1, (int)road.y1, (int)road.x2, (int)road.y2);        }        S2.printGraph();        Vertex src = S2.addSourceVertex("Farmland");        Vertex sink = S2.addSinkVertex("Brewery");        System.out.println(S2.maxFlow(src, sink));        S2.printGraph();        Siec S3 = new Siec();        for(var point : intersections){            Vertex v = S3.addVertex((int)point.getX(), (int) point.getY());            v.setType("Intersection");        }        for(var farmland : data.farmlands){            Vertex v = S3.addVertex((int)farmland.getX(), (int) farmland.getY());            v.setType("Farmland");            v.setCapacity((int)farmland.getProductionCapacity());        }        for(var breweries : data.breweries){            Vertex v = S3.addVertex((int)breweries.getX(), (int)breweries.getY());            v.setType("Brewery");            v.setCapacity((int)breweries.getProductionCapacity());        }        for(var tavern : data.taverns){            Vertex v = S3.addVertex((int)tavern.getX(), (int)tavern.getY());            v.setType("Tavern");            v.setCapacity((int)tavern.getConsumptionCapacity());        }        for (Road road : data.roads) {            S3.addEdge(road.getMaxBeerFlow(), (int)road.x1, (int)road.y1, (int)road.x2, (int)road.y2);        }        src = S3.addSourceVertex("Brewery");        sink = S3.addSinkVertex("Tavern");        System.out.println(S3.maxFlow(src, sink));    }    public static Data readFile() {        try (FileReader reader = new FileReader("data.json")) {            Gson gson = new GsonBuilder().setPrettyPrinting().create();            Data data = gson.fromJson(reader, Data.class);            return data;        } catch (IOException e) {            throw new RuntimeException(e);        }    }}
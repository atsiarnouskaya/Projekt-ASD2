package SiecPrzeplywowa;import com.google.gson.*;import java.awt.geom.Point2D;import java.io.FileReader;import java.io.FileWriter;import java.io.IOException;import java.io.PrintWriter;import java.util.Comparator;import java.util.List;public class Main {    public static void main(String[] args) {        Data data= readFile();        Siec S2 = new Siec();        List<Point2D> intersections = data.getIntersections();        for(var point : intersections){            Vertex v = S2.addVertex((int)point.getX(), (int) point.getY());            v.setType("Intersection");        }        for(var farmland : data.farmlands){            Vertex v = S2.addVertex((int)farmland.getX(), (int) farmland.getY());            v.setType("Farmland");            v.setCapacity((int)farmland.getProductionCapacity());        }        for(var breweries : data.breweries){            Vertex v = S2.addVertex((int)breweries.getX(), (int)breweries.getY());            v.setType("Brewery");            v.setCapacity((int)breweries.getProductionCapacity());        }        for(var tavern : data.taverns){            Vertex v = S2.addVertex((int)tavern.getX(), (int)tavern.getY());            v.setType("Tavern");            v.setCapacity((int)tavern.getConsumptionCapacity());        }        for (Road road : data.roads) {            S2.addEdge(road.getMaxBarleyFlow(), (int)road.x1, (int)road.y1, (int)road.x2, (int)road.y2);        }        Vertex src = S2.addSourceVertex("Farmland");        Vertex sink = S2.addSinkVertex("Brewery");        int maxBarleyFlow=S2.maxFlow(src, sink);        S2.printGraph();        System.out.println("Max barley flow: "+maxBarleyFlow);        generateSVGfile(S2, "BARLEY FLOW", "barleyFlow.svg", maxBarleyFlow);        for (Road road : data.roads) {            S2.setBeerFlow(road.getMaxBeerFlow(), (int)road.x1, (int)road.y1, (int)road.x2, (int)road.y2);            if (S2.getVertex((int)road.x1, (int)road.y1).getType().equals("Brewery")) {                S2.getVertex((int)road.x1, (int)road.y1).changeCapacity();            }            if (S2.getVertex((int)road.x2, (int)road.y2).getType().equals("Brewery")) {                S2.getVertex((int)road.x2, (int)road.y2).changeCapacity();            }        }        S2.deleteSourceVertex(src);        S2.deleteSinkVertex(sink);        Vertex src2 = S2.addSourceVertex("Brewery");        Vertex sink2 = S2.addSinkVertex("Tavern");        int maxBeerFlow=S2.maxFlow(src2, sink2);        System.out.println("Max beer flow: "+maxBeerFlow);        S2.printGraph();        generateSVGfile(S2, "BEER FLOW", "beerFlow.svg", maxBeerFlow);    }    public static Data readFile() {        try (FileReader reader = new FileReader("data.json")) {            Gson gson = new GsonBuilder().setPrettyPrinting().create();            return gson.fromJson(reader, Data.class);        } catch (IOException e) {            throw new RuntimeException(e);        }    }    public static void generateSVGfile(Siec siec, String mapName, String fileName, int maxFlow) {        var roads = siec.getGraph().values().stream()                .flatMap(x -> x.values().stream())                .filter(r -> r.getTo().getType() != "source"                        && r.getTo().getType() != "sink"                        && r.getFrom().getType() != "source"                        && r.getFrom().getType() != "sink"                )                .filter(r -> r.getCurrentFlow() > 0                || (r.getCurrentFlow() == 0                                && r.getReverseEdge().getCurrentFlow() == 0                                && r.getFrom().getLocalId() > r.getTo().getLocalId())                )                .toList();        var intersections = siec.getGraph().keySet().stream().filter(v ->v.getType() == "Intersection").toList();        var farmlands = siec.getGraph().keySet().stream().filter(v ->v.getType() == "Farmland").toList();        var breweries = siec.getGraph().keySet().stream().filter(v ->v.getType() == "Brewery").toList();        var taverns = siec.getGraph().keySet().stream().filter(v ->v.getType() == "Tavern").toList();        double margin = 20;        int minXCoord = siec.getGraph().keySet().stream().filter(v -> v.getType() != "source" && v.getType() != "sink").min(Comparator.comparingInt(Vertex::getX)).get().getX();        int minYCoord = siec.getGraph().keySet().stream().filter(v -> v.getType() != "source" && v.getType() != "sink").min(Comparator.comparingInt(Vertex::getY)).get().getY();        int maxYCoord = siec.getGraph().keySet().stream().filter(v -> v.getType() != "source" && v.getType() != "sink").max(Comparator.comparingInt(Vertex::getY)).get().getY();        int maxXCoord = siec.getGraph().keySet().stream().filter(v -> v.getType() != "source" && v.getType() != "sink").max(Comparator.comparingInt(Vertex::getX)).get().getX();        double mapHeight = maxYCoord + (margin *2);        double mapWidth = maxXCoord + (margin *2);        try (PrintWriter writer = new PrintWriter(new FileWriter(fileName))) {            writer.println("<!DOCTYPE html>\n" +                    "<html>\n" +                    "<body>\n" +                    "\n" +                    "<svg display=\"block\" style=\"background-color:black;\" height=\"" + mapHeight + "\" width=\"" + mapWidth + "\" xmlns=\"http://www.w3.org/2000/svg\">");            writer.println("<text x=\"2\" y=\""+(mapHeight-2)+"\" font-family=\"Arial\" font-weight=\"600\" font-size=\"3.5px\" fill=\"white\">" + mapName + "  (max flow: "+ maxFlow + ") </text>");            for (Edge road : roads) {                if(road.getCurrentFlow()!=0)                    writer.println("<line x1=\"" + (road.getFrom().getX() - minXCoord + margin) +                            "\" y1=\"" + (road.getFrom().getY() - minYCoord + margin) +                            "\" x2=\"" + (road.getTo().getX() - minXCoord + margin) +                            "\" y2=\"" + (road.getTo().getY()- minYCoord + margin) +                            "\" style=\"stroke:#30271c; stroke-width:3; opacity:1;\" />");                writer.println("<line x1=\"" + (road.getFrom().getX() - minXCoord + margin) + "\" y1=\"" + (road.getFrom().getY() - minYCoord + margin) + "\" x2=\"" + (road.getTo().getX() - minXCoord + margin) + "\" y2=\"" + (road.getTo().getY()- minYCoord + margin) + "\"  style=\"stroke:"+ (road.getCurrentFlow()==0?"#806f5b":"#453828")+"; stroke-width:" + ((road.getCurrentFlow()==0)?"1":"1.3") + "; opacity:" + ((road.getCurrentFlow()==0)?"0.6":"1")+";\" />");                writer.println("<text x=\"" + ((road.getFrom().getX() - minXCoord + margin) + (road.getTo().getX()- minXCoord + margin)) / 2 + "\" y=\"" + ((road.getFrom().getY()- minYCoord + margin) + (road.getTo().getY()- minYCoord + margin)) / 2 + "\" fill=\"white\" font-family=\"Arial, sans-serif\" font-weight=\"600\" font-size=\"3.5\" text-anchor=\"middle\" dominant-baseline=\"middle\">" + road.getCurrentFlow() +"/" + road.getMaxFlow() + "</text>");            }            for (Vertex intersection : intersections)                writer.println("<circle cx=\"" + (intersection.getX()- minXCoord + margin) + "\" cy=\"" + (intersection.getY()- minYCoord + margin) + "\" r=\"2\" fill=\"#806f5b\" />");            for (Vertex farmland : farmlands) {                writer.println("<circle cx=\"" + (farmland.getX()- minXCoord + margin) + "\" cy=\"" + (farmland.getY()- minYCoord + margin) + "\" r=\"4.1\" fill=\"#FFC300\"  style=\"opacity:0.7; \"/>");                writer.println("<text x=\"" + (farmland.getX()- minXCoord + margin) + "\" y=\"" + (farmland.getY()- minYCoord + margin) + "\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"3.2\" font-weight=\"600\" text-anchor=\"middle\" dominant-baseline=\"end\">F</text>");                writer.println("<text x=\"" + (farmland.getX()- minXCoord + margin) + "\" y=\"" + ((farmland.getY()- minYCoord + margin)+2.5) + "\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"2.5\" font-weight=\"600\" text-anchor=\"middle\" dominant-baseline=\"start\">" + farmland.getCapacity() + "</text>");            }            for (Vertex brewery : breweries) {                int incomingFlow = roads.stream()                        .filter(r -> r.getTo() == brewery)                        .map(x->x.getCurrentFlow())                        .findFirst()                        .orElse(0);                writer.println("<circle cx=\"" + (brewery.getX()- minXCoord + margin) + "\" cy=\"" + (brewery.getY()- minYCoord + margin) + "\" r=\"4.1\" fill=\"#90EE90\"  style=\"opacity:0.7; \" />");                writer.println("<text x=\"" + (brewery.getX()- minXCoord + margin) + "\" y=\"" + (brewery.getY()- minYCoord + margin) + "\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"3.2\" font-weight=\"600\" text-anchor=\"middle\" dominant-baseline=\"end\">B</text>");                writer.println("<text x=\"" + (brewery.getX()- minXCoord + margin) + "\" y=\"" + ((brewery.getY()- minYCoord + margin)+2.5) + "\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"2.5\" font-weight=\"600\" text-anchor=\"middle\" dominant-baseline=\"start\">" + incomingFlow+ "/" + brewery.getCapacity() + "</text>");            }            for (Vertex tavern : taverns) {                int incomingFlow = roads.stream()                        .filter(r -> r.getTo() == tavern)                        .map(x->x.getCurrentFlow())                        .findFirst()                        .orElse(0);                writer.println("<circle cx=\"" + (tavern.getX()- minXCoord + margin) + "\" cy=\"" + (tavern.getY()- minYCoord + margin) + "\" r=\"4.1\" fill=\"#8B5A2B\"   style=\"opacity:0.7; \"/>");                writer.println("<text x=\"" + (tavern.getX()- minXCoord + margin) + "\" y=\"" + (tavern.getY()- minYCoord + margin) + "\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"3.2\" font-weight=\"600\" text-anchor=\"middle\" dominant-baseline=\"end\">T</text>");                writer.println("<text x=\"" + (tavern.getX()- minXCoord + margin) + "\" y=\"" + ((tavern.getY()- minYCoord + margin)+2.5) + "\" fill=\"white\" font-family=\"Arial, sans-serif\" font-size=\"2.5\" font-weight=\"600\" text-anchor=\"middle\" dominant-baseline=\"start\">" + incomingFlow+ "/" + tavern.getCapacity() + "</text>");            }            writer.println("\n" +                    "</svg>\n" +                    "\n" +                    "</body>\n" +                    "</html>");        } catch (IOException e) {            System.err.println("Wystąpił błąd podczas zapisywania do pliku: " + e.getMessage());        }    }}